import { useEffect, useRef, useState } from "react";
import { useCallStore } from "./state/call";
import {
  ClipboardOutline,
  SpeakerWaveSolid,
  SpeakerXMarkSolid,
  VideoCameraOutline,
  VideoCameraSlashOutline,
} from "@graywolfai/react-heroicons";

function App() {
  const call = useCallStore();
  const userVideoRef = useRef<HTMLVideoElement | null>(null);
  useEffect(() => {
    const userVideo = userVideoRef.current;
    if (userVideo) {
      userVideo.srcObject = call.userStream;
    }
    return () => {
      if (userVideo) {
        userVideo.srcObject = null; // Clean up media stream
      }
    };
  }, [call.userStream]);
  const remoteVideoRef = useRef<HTMLVideoElement | null>(null);
  useEffect(() => {
    const remoteVideo = remoteVideoRef.current;
    if (remoteVideo) {
      console.log(
        "Assigning remote stream to video element",
        call.remoteStream
      );
      remoteVideo.srcObject = call.remoteStream;
    }
    return () => {
      if (remoteVideo) {
        remoteVideo.srcObject = null; // Clean up media stream
      }
    };
  }, [call.remoteStream]);

  const onClickStart = () => {
    const passphrase = document.querySelector(
      "input[name='passphrase']"
    ) as HTMLInputElement;
    call.startCall(passphrase.value);
  };

  const onClickLeave = () => {
    console.log("leaving call");
    call.endCall();
  };

  const [isCopied, setIsCopied] = useState(false);
  const onClickCopy = () => {
    const passphrase = document.querySelector(
      "input[name='passphrase']"
    ) as HTMLInputElement;
    navigator.clipboard.writeText(passphrase.value);

    setIsCopied(true);
    setTimeout(() => setIsCopied(false), 2000);
  };

  return (
    <>
      <div className="h-screen w-screen">
        {!call.ongoing && (
          <div className="h-full flex flex-col bg-gray-300 rounded-md items-center justify-center gap-2">
            <div className="mb-20">
              <span className="text-3xl">
                Share a passphrase with a friend and start video chatting
              </span>
            </div>
            <div className="flex items-center justify-center gap-2">
              <span>Autogenerated phrase:</span>
              <div className="flex gap-2">
                <input
                  type="text"
                  name="passphrase"
                  defaultValue={call.passphrase}
                  className="rounded-sm w-96"
                />
                <button
                  name="copy"
                  className="p-1 h-7 flex items-center hover:px-2 bg-gray-500 rounded-lg active:bg-gray-700"
                  onClick={onClickCopy}
                >
                  {isCopied ? (
                    "Copied!"
                  ) : (
                    <ClipboardOutline className="h-5 w-5" />
                  )}
                </button>
              </div>
            </div>
            <div>
              <button
                name="start"
                onClick={onClickStart}
                className="p-3 hover:px-4 mt-10 bg-gray-500 rounded-lg active:bg-gray-700 text-2xl"
              >
                Start
              </button>
            </div>
          </div>
        )}
        {call.ongoing && (
          <div className="h-screen w-screen">
            <div
              className={`transition-all duration-500 ease-in-out bg-gray-300 rounded-lg flex flex-col ${
                call.solo
                  ? "h-screen w-screen gap-1"
                  : "fixed bottom-[5%] left-[5%] h-64 w-52 z-10"
              }`}
            >
              <video
                id="user"
                muted={true}
                autoPlay={true}
                ref={userVideoRef}
                className="h-[96%] object-cover"
              ></video>
              <div className="flex place-content-evenly items-center">
                <button
                  onClick={call.switchAudio}
                  className="w-[50%] flex items-center justify-center"
                >
                  <div className="flex items-center gap-1">
                    {call.isAudio ? (
                      <SpeakerWaveSolid className="w-5 h-5" />
                    ) : (
                      <SpeakerXMarkSolid className="w-5 h-5" />
                    )}
                    <span className="text-xs">
                      {call.isAudio ? "Mute" : "Unmute"}
                    </span>
                  </div>
                </button>
                |
                <button
                  onClick={call.switchCamera}
                  className="w-[50%] flex items-center justify-center"
                >
                  <div className="flex items-center gap-1">
                    {call.isCamera ? (
                      <VideoCameraOutline className="w-5 h-5" />
                    ) : (
                      <VideoCameraSlashOutline className="w-5 h-5" />
                    )}
                    <span className="text-xs">
                      {call.isCamera ? "Stop video" : "Share video"}
                    </span>
                  </div>
                </button>
              </div>
            </div>
            {!call.solo && (
              <div className="bg-gray-500 h-full w-full">
                <video
                  ref={remoteVideoRef}
                  autoPlay={true}
                  id="caller"
                  className="w-full h-full object-cover"
                ></video>
              </div>
            )}
            <button
              name="Leave"
              className="fixed right-[5%] bottom-[10%] bg-white active:bg-gray-500 p-3 rounded-lg text-xl"
              onClick={onClickLeave}
            >
              Leave
            </button>
          </div>
        )}
      </div>
    </>
  );
}

export default App;
