import { ClipboardOutline } from "@graywolfai/react-heroicons";
import { useState } from "react";
import { v7 } from "uuid";
import { useCallStore } from "../state/call";

export const Home = () => {
  const startCall = useCallStore((state) => state.startCall);

  const [passphrase, setPassphrase] = useState(v7());
  const [error, setError] = useState("");
  const regex = /^[a-zA-Z0-9-]+$/;
  const handlePassphrase = (event: React.ChangeEvent<HTMLInputElement>) => {
    const newPassphrase = event.target.value;
    setPassphrase(newPassphrase);
    if (!newPassphrase.length) {
      setError("The passphrase cannot be empty");
      return;
    }
    if (newPassphrase.length > 50) {
      setError("The passphrase can be at most 50 characters long");
      return;
    }
    if (!regex.exec(newPassphrase)) {
      setError("The passphrase can only contain letters, numbers and '-'.");
      return;
    }

    setError("");
  };

  const [isCopied, setIsCopied] = useState(false);
  const onClickCopy = () => {
    navigator.clipboard.writeText(passphrase);
    setIsCopied(true);
    setTimeout(() => setIsCopied(false), 2000);
  };

  const onClickStart = () => {
    startCall(passphrase);
  };

  return (
    <div className="h-screen w-screen">
      <div className="flex h-full flex-col items-center justify-center gap-2 rounded-md bg-gray-300">
        <div className="mb-20 flex w-[80%] flex-col items-center justify-center">
          <span className="text-3xl">
            Share a passphrase with a friend and start video chatting
          </span>
          <span className="text-sm italic">
            (use the default passphrase if you don't want to join strangers or
            be joined by strangers)
          </span>
        </div>
        <div className="flex w-[80%] flex-col items-center justify-center gap-2">
          <span>Autogenerated phrase:</span>
          <div className="flex w-full justify-center gap-2">
            <input
              type="text"
              name="passphrase"
              value={passphrase}
              className="w-[100%] rounded-sm md:w-[55%] lg:w-[33%]"
              onChange={handlePassphrase}
            />
            <button
              name="copy"
              className="flex h-7 items-center rounded-lg bg-gray-500 p-1 active:bg-gray-700"
              onClick={onClickCopy}
            >
              {isCopied ? "Copied!" : <ClipboardOutline className="h-5 w-5" />}
            </button>
          </div>
          <div>
            <span className="text-red-600">{error}</span>
          </div>
        </div>
        <div>
          <button
            name="start"
            onClick={onClickStart}
            disabled={!!error}
            className={`mt-10 rounded-lg bg-gray-500 p-3 text-2xl ${
              !error && "hover:bg-gray-600 hover:px-4 active:bg-gray-700"
            }`}
          >
            Start
          </button>
        </div>
      </div>
    </div>
  );
};
